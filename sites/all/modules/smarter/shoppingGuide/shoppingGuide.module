<?php

/**
 *  author  :   jeffstric
 *  email   :   jeffstricg@gmail.com
 *  date    :   Nov 28, 2012
 *  time    :   5:15:17 PM
 * */
/**
 * @file 
 * add  shopping guide field using the Field API. 
 * 
 */
//This is the shop guide item's field machine name in shop guide show
define('SHOP_ITEM_FIELD_NAME' , 'field_shop_guide_item_id');

//This is the shop guide item's node type machine name
define('SHOP_ITEM_TYPE_NAME' , 'shop_guide_item');

/**
 * Implements hook_field_info(). 
 * 
 * Provides the description of the field. 
 */
function shoppingGuide_field_info()
{
    return array(
	'shopGuideItemField' => array(
	    'label' => t('shopping guide item') ,
	    'description' => t('add  shopping guide field ') ,
	    'default_widget' => 'shopGuideItemWidget' ,
	    'default_formatter' => 'shopping_guide_item_list' ,
	) ,
    );
}

/**
 * Implements hook_field_is_empty(). 
 */
function shoppingGuide_field_is_empty( $item , $field )
{
    return empty($item[ 'iid' ]);
}

/**
 * Implements hook_field_formatter_info(). 
 */
function shoppingGuide_field_formatter_info()
{
    return array(
	// This formatter just displays the hex value in the color indicated. 
	'shopping_guide_item_list' => array(
	    'label' => t('select items in this shopping guide') ,
	    'field types' => array( 'shopGuideItemField' ) ,
	) ,
    );
}

/**
 * Implements hook_field_formatter_view(). 
 */
function shoppingGuide_field_formatter_view( $entity_type , $entity , $field , $instance , $langcode , $items , $display )
{
    $element = array( );
    if ( $display[ 'type' ] == 'shopping_guide_item_list' ) {
	$nodeIds = array( );
	foreach ( $items as $key => $value ) {
	    $nodeIds[ $key ] = $value[ 'iid' ];
	}
	$items = node_load_multiple($nodeIds);

	foreach ( $items as $delta => $item ) {

	    $query = db_select('field_config_instance' , 'f');
	    $result = $query->fields('f' , array( 'field_name' ))
		    ->condition('bundle' , SHOP_ITEM_TYPE_NAME)
		    ->execute();
	    foreach ( $result as $v ) {
		$key = $v->field_name;
		if ( isset($item->$key) ) {
		    $item->$key = field_get_items('node' , $item , $key);
		}
	    }

	    // get strore information ,it's shopping guide item special
	    $item->field_store[ 0 ][ 'store' ] = taxonomy_term_load($item->field_store[ 0 ][ 'tid' ]);
	    $info = (shoppingGuide_getItemInfo($item) );
	    $element[ $delta ] = $info;
	}
    }

    $element = array( SHOP_ITEM_FIELD_NAME . '_detail' => $element );

    return $element;
}

/**
 * Implements hook_field_widget_info(). 
 */
function shoppingGuide_field_widget_info()
{
    return array(
	'shopGuideItemWidget' => array(
	    'label' => t('nomal items show') ,
	    'field types' => array( 'shopGuideItemField' ) ,
	) ,
    );
}

/**
 * Implements hook_field_widget_form(). 
 */
function shoppingGuide_field_widget_form( &$form , &$form_state , $field , $instance , $langcode , $items , $delta , $element )
{

    $node = isset($form_state[ 'node' ]) ? $form_state[ 'node' ] : FALSE;
    $nid = (isset($node) && isset($node->nid) ) ? $node->nid : FALSE;
    $value = isset($items[ $delta ][ 'iid' ]) ? $items[ $delta ][ 'iid' ] : '';
    $element += array(
	'#delta' => $delta ,
    );
    $element[ 'iid' ] = array( );

    switch ( $instance[ 'widget' ][ 'type' ] ) {
	case 'shopGuideItemWidget':
	    //whether this widget is add or edit input
	    $is_edit = $delta <= count($items) - 1;

	    $defaultValue = shoppingGuide_getDefaultValue($nid);
	    $default = isset($defaultValue[ $delta ]) ? $defaultValue[ $delta ] : '';

	    $element[ 'iid' ] += array(
		'#type' => 'select' ,
		'#title' => t('select shopping guide item') ,
		'#default_value' => array( $default ) ,
		'#options' => shoppingGuide_getItems($is_edit) ,
	    );
    }
    return $element;
}

function shoppingGuide_getItemInfo( stdClass $info )
{
    $title = $info->title;

    $body = $info->body;
    $body = $body[ 0 ][ 'safe_value' ];

    $store = $info->field_store;
    $store = $store[ 0 ][ 'store' ];
    $store = $store->name;

    $price = $info->field_price;
    $price = $price[ 0 ][ 'value' ];

    $image = $info->field_shop_guide_item_img;
    $image = file_create_url($image[ 0 ][ 'uri' ]);

    return compact('title' , 'body' , 'store' , 'price' , 'image');
}

function shoppingGuide_getItems( $edit_item = TRUE )
{
    $query = db_select('node' , 'n');
    $result = $query->condition('type' , SHOP_ITEM_TYPE_NAME)
	    ->fields('n' , array( 'nid' , 'title' ))
	    ->execute();

    $choose_value = ($edit_item) ? t('delete current items') : t('chose  items');
    $return = array( 0 => $choose_value );
    foreach ( $result as $value ) {
	$return[ $value->nid ] = $value->title;
    }
    return $return;
}

function shoppingGuide_getDefaultValue( $nodeId = FALSE )
{
    $result = array( );
    if ( $nodeId ) {
	$tableName = cache_get('shop_guide_item_id_table' , 'cache_field');
	if ( !$tableName ) {
	    $tableName = shoppingGuide_getTableName(SHOP_ITEM_FIELD_NAME);
	    cache_set('shop_guide_item_id_table' , $tableName , 'cache_field' , CACHE_PERMANENT);
	} else {
	    $tableName = $tableName->data;
	}
	if ( $tableName ) {
	    $query = db_select($tableName , 'ST');
	    $query->addField('ST' , 'field_shop_guide_item_id_iid' , 'iid');
	    $resultDB = $query->fields('ST' , array( 'entity_id' ))
		    ->condition('entity_id' , $nodeId)
		    ->execute();
	    foreach ( $resultDB as $value ) {
		$result[ ] = $value->iid;
	    }
	}
    }
    return $result;
}

function shoppingGuide_getTableName( $fieldName )
{
    $query = db_select('field_config' , 'FC');
    $tableName = FALSE;
    $resultDB = array( );
    $resultDB = $query->fields('FC' , array( 'data' ))
	    ->condition('field_name' , $fieldName)
	    ->execute();
    if ( $resultDB )
	foreach ( $resultDB as $value ) {
	    $data = unserialize($value->data);
	    $tableKeys = array_keys($data[ 'storage' ][ 'details' ][ 'sql' ][ 'FIELD_LOAD_CURRENT' ]);
	    $tableName = array_shift($tableKeys);
	    break;
	}
    return $tableName;
}

/**
 * Implements hook_field_validate().
 *
 *
 */
function shoppingGuide_field_validate( $entity_type , $entity , $field , $instance , $langcode , $items , &$errors )
{
    foreach ( $items as $delta => $item ) {
	if ( !empty($item[ 'iid' ]) ) {
	    if ( !is_numeric($item[ 'iid' ]) ) {
		$errors[ $field[ 'field_name' ] ][ $langcode ][ $delta ][ ] = array(
		    'error' => 'invalid_type_item_id' ,
		    'message' => t('The shop item id must numeric') ,
		);
	    }
	}
    }
}

/**
 * Implements hook_field_widget_error().
 */
function shoppingGuide_field_widget_error( $element , $error , $form , &$form_state )
{
    switch ( $error[ 'error' ] ) {
	case 'invalid_type_item_id':
	    form_error($element , $error[ 'message' ]);
	    break;
    }
}


<?php

/**
 *  author  :   jeffstric
 *  email   :   jeffstricg@gmail.com
 *  date    :   2012-12-12
 *  time    :   20:01:31
 * */
define('IMAGEFACTORYKEY' , 'picture');

/**
 * Implementation of hook_permission() 
 */
function imageFactory_permission()
{
  return array(
      'imageFactory image upload' => array(
          'title' => t('imageFactory image manage') ,
          'description' => t('Allow users use imageFactory function') ,
      ) ,
      'imageFactory fonts manage' => array(
          'title' => t('imageFactory fonts manage') ,
          'description' => t('Allow users manage imageFactory\' fonts') ,
      ) ,
  );
}

function imageFactory_menu()
{
  $items[ 'admin/config/media/imageFactory' ] = array(
      'title' => 'image factory' ,
      'description' => 'Image Factory help you resize image and add text on it' ,
      'page callback' => 'imageFactory_imageList' ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory image manage' ) ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/upload' ] = array(
      'title' => 'upload image' ,
      'page callback' => 'drupal_get_form' ,
      'page arguments' => array( 'imageFactory_fileUploadForm' ) ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory image upload' ) ,
      'type' => MENU_SUGGESTED_ITEM ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/fonts/upload' ] = array(
      'title' => 'upload ttf fonts' ,
      'page callback' => 'drupal_get_form' ,
      'page arguments' => array( 'imageFactory_fontsUploadForm' ) ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory fonts manage' ) ,
      'type' => MENU_SUGGESTED_ITEM ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/fonts' ] = array(
      'title' => 'fonts list' ,
      'page callback' => 'imageFactory_fontList' ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory fonts manage' ) ,
      'type' => MENU_CALLBACK ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/fonts/del/%' ] = array(
      'title' => 'fonts list' ,
      'page callback' => 'imageFactory_fontDel' ,
      'page arguments' => array( 4 ) ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory fonts manage' ) ,
      'type' => MENU_CALLBACK ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/list' ] = array(
      'title' => 'image factory' ,
      'page callback' => 'imageFactory_imageList' ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory image manage' ) ,
      'type' => MENU_SUGGESTED_ITEM ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/edit/%' ] = array(
      'title' => 'upload image' ,
      'page callback' => 'imageFactory_imageEdit' ,
      'page arguments' => array( 3 ) ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory image manage' ) ,
      'type' => MENU_SUGGESTED_ITEM ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/resizeAjax' ] = array(
      'title' => 'resize image' ,
      'page callback' => 'imageFactory_ResizeAjax' ,
      'access callback' => TRUE ,
      'type' => MENU_CALLBACK ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/addText' ] = array(
      'title' => 'upload image' ,
      'page callback' => 'imageFactory_addText' ,
      'access callback' => TRUE ,
      'type' => MENU_CALLBACK ,
      'weight' => 1
  );
  $items[ 'admin/imageFactory/save' ] = array(
      'title' => 'save image' ,
      'page callback' => 'imageFactory_save' ,
      'access callback' => 'user_access' ,
      'access arguments' => array( 'imageFactory image manage' ) ,
      'type' => MENU_CALLBACK ,
      'weight' => 1
  );
  return $items;
}

function imageFactory_help( $path , $arg )
{
  //describe administrative and end-user access, functionality, and module usage
  switch ( $path ) {
    case 'admin/help#imageFactory';
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The imagefactory module can be used to create image with cumstom fonts text and background .It will save picture on \'public://imageFactory\' and add record to file_managed table ,  then you can render picture by module \'IMCE for File Field\' .See the online handbook entry for the <a href="@imgfactoryDocument">imgfactory module</a>.' , array( '@imgfactoryDocument' => 'http://drupal.org/sandbox/jeffstric/1937132' )) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('First use') . '</dt>';
      $output .= '<dd>' . t('You should upload ttf font file to server.<a href="@imgfactoryFontsUpload">upload fonts</a>' , array( '@imgfactoryFontsUpload' => url('admin/imageFactory/fonts/upload') )) . '</dd>';
      $output .= '<dt>' . t('The tmp picture remove') . '</dt>';
      $output .= '<dd>' . t('When you create picture by imageFactory, module will create temporary file. You can remove that by call <a href="@cronUrl">cron</a>' , array( '@cronUrl' => url('admin/config/system/cron') ));
      $output .= '</dl>';
      return $output;
      break;
  }
}

function imageFactory_fileUploadForm()
{
  $form[ '#method' ] = 'post';
  $form[ '#attributes' ][ 'enctype' ] = 'multipart/form-data';
  $form[ IMAGEFACTORYKEY ] = array(
      '#type' => 'file' ,
      '#title' => t('Upload picture') ,
      '#size' => 48 ,
      '#description' => t('The picture you want upload.') ,
  );
  $form[ 'submit' ] = array(
      '#type' => 'submit' ,
      '#value' => t('Submit')
  );
  return $form;
}

function imageFactory_fileUploadForm_submit( $form , &$form_state )
{
  $validators = array(
      'file_validate_extensions' => array( 'jpg png gif' ) ,
  );
  $destinationPath = imageFactory_getDir('upload');

  $file = file_save_upload(IMAGEFACTORYKEY , $validators , $destinationPath);
  if ( $file ) {
    $file->status = 1;
    try {
      file_save($file);
      drupal_set_message(t('upload file success!'));
    } catch ( Exception $e ) {
      drupal_set_message($e->getMessage());
    }
  }

  drupal_goto('admin/imageFactory/list');
}

function imageFactory_fontsUploadForm()
{
  $form[ '#method' ] = 'post';
  $form[ '#attributes' ][ 'enctype' ] = 'multipart/form-data';
  $form[ IMAGEFACTORYKEY ] = array(
      '#type' => 'file' ,
      '#title' => t('Upload fonts') ,
      '#size' => 48 ,
      '#description' => t('The fonts you want upload.') ,
  );
  $form[ 'submit' ] = array(
      '#type' => 'submit' ,
      '#value' => t('Submit')
  );
  return $form;
}

function imageFactory_fontsUploadForm_submit( $form , &$form_state )
{
  $validators = array(
      'file_validate_extensions' => array( 'ttf' ) ,
  );
  $destinationPath = imageFactory_getDir('fonts' , FALSE , FALSE);

  $file = file_save_upload(IMAGEFACTORYKEY , $validators , $destinationPath);
  if ( $file ) {
    try {
      file_save($file);
      drupal_set_message(t('upload fonts success!'));
    } catch ( Exception $e ) {
      drupal_set_message($e->getMessage());
    }
  }

  //create fonts picture
  if ( imageFacory_fontsImageCreate() ) {
    drupal_set_message('fonts pic create success');
  }

  drupal_goto('admin/imageFactory/fonts');
}

function imageFacory_fontsImageCreate()
{
  try {
    $fonts = imageFactory_getFonts();
    $fontsPath = imageFactory_getDir('fonts' , TRUE , FALSE);
    if ( is_array($fonts) && count($fonts) ) {
      require 'drawMultiText.php';
      $_POST[ 'N' ] = 1;
      $_POST[ 'B' ] = drupal_get_path('module' , 'imageFactory') . DIRECTORY_SEPARATOR .
              'image' . DIRECTORY_SEPARATOR . 'fontShow.png';
      $fontsPicPath = imageFactory_getDir('fontsImage' , TRUE , FALSE);
      foreach ( $fonts as $key => $value ) {
        //prepare fonts image info
        $_POST[ 'X0' ] = 0;
        $_POST[ 'Y0' ] = 30;
        $_POST[ 'S0' ] = 30;
        $_POST[ 'A0' ] = 0;
        $_POST[ 'C0' ] = '000000';
        $_POST[ 'F0' ] = $key;
        $_POST[ 'H0' ] = 1;
        $_POST[ 'T0' ] = 'abcdefghijklmn';
        $fileNameWithPath = $fontsPicPath . DIRECTORY_SEPARATOR . $value . '.png';
        $msg = '';
        if ( !drawTextOnPic($fileNameWithPath , $fonts , $fontsPath , $msg) ) {
          throw new Exception($msg);
        }
      }
    }
  } catch ( Exception $e ) {
    drupal_set_message($e->getMessage() , 'error');
  }
}

function imageFactory_fontList()
{
  $output = $aHtml =
          '<div class="imageFactory_fonts_upload">
		<ul>
		    <li>' . l('upload fonts' , 'admin/imageFactory/fonts/upload' , array( 'absolute' => true )) . '</li>
		    <li>' . l('back to imageFactory' , 'admin/imageFactory/list' , array( 'absolute' => true )) . '</li>
		</ul>
	    </div>';

  $fontPicPath = imageFactory_getDir('fontsImage' , FALSE , FALSE);
  $fonts = imageFactory_getFonts();
  $rows = array( );
  if ( $fonts ) {
    foreach ( $fonts as $value ) {
      $rows[ ] = array(
          $value ,
          '<img src="' . file_create_url($fontPicPath . '/' . $value . '.png') . '"/>' ,
          '<a href="' . url('/admin/imageFactory/fonts/del/' . $value) . '">remove</a>'
      );
    }
    $tableInfo = array(
        'header' => array( 'font family' , 'font example' , 'option' ) ,
        'rows' => $rows
    );
    $output .= theme('table' , $tableInfo) . $aHtml;
  }
  return $output;
}

function imageFactory_fontDel( $font )
{
  $fontPath = imageFactory_getDir('fonts' , TRUE , FALSE);
  $fontWithPath = $fontPath . DIRECTORY_SEPARATOR . $font . '.ttf';
  if ( file_exists($fontWithPath) ) {
    if ( unlink($fontWithPath) ) {
      drupal_set_message('remove font ' . $font . ' success!');
    }
  } else {
    drupal_set_message('remove font ' . $font . ' fail: no font file');
  }
  drupal_goto('admin/imageFactory/fonts');
}

function imageFactory_getFonts()
{
  $return = array( );
  $fontPath = imageFactory_getDir('fonts' , TRUE , FALSE);
  if ( is_dir($fontPath) ) {
    $fso = opendir($fontPath);
    while ( $flist = readdir($fso) ) {
      if ( $flist == '.' || $flist == '..' )
        continue;
      $fileArray = explode('.' , $flist);
      if ( strtolower(array_pop($fileArray)) == 'ttf' ) {
        $return[ ] = implode('.' , $fileArray);
      }
    }
    closedir($fso);
  }
  return $return;
}

function imageFactory_imageList()
{
  $aHtml = '<div class="imageFactory_goto_upload"><ul>
		    <li>' . l('upload fonts' , 'admin/imageFactory/fonts/upload' , array( 'absolute' => true )) . '</li>
		    <li>' . l('fonts manage' , 'admin/imageFactory/fonts/list' , array( 'absolute' => true )) . '</li>
		    <li>' . l('upload image' , 'admin/imageFactory/upload' , array( 'absolute' => true )) . '</li>
		</ul></div>';
  $count = db_query("SELECT COUNT(*) FROM {file_managed} fm where  fm.filemime like 'image/%'")->fetchField();
  $pageNum = pager_default_initialize($count , 10);
  $pagerHtml = theme('pager' , array( 'quantity' => $count ));
  $query = db_query_range("select * from {file_managed} fm where fm.filemime like 'image/%' order by fm.timestamp desc " , $pageNum * 10 , 10);
  $query->execute();
  $result = $query->fetchAllAssoc('fid' , PDO::FETCH_ASSOC);
  $fileHtml = theme_imageFactory_file_formatter_table(array( 'items' => $result ));
  return $aHtml . $pagerHtml . $fileHtml . $pagerHtml;
}

function theme_imageFactory_file_formatter_table( $variables )
{
  $header = array( t('Attachment') , t('time') , t('Size') , t('thumb') , t('operate') );
  $rows = array( );
  foreach ( $variables[ 'items' ] as $delta => $item ) {
    $rows[ ] = array(
        theme('file_link' , array( 'file' => (object) $item )) ,
        date('Y-m-d H:i:s' , $item[ 'timestamp' ]) . '&nbsp;&nbsp;' ,
        format_size($item[ 'filesize' ]) ,
        '<img  height="100" width="100" src="' . file_create_url($item[ 'uri' ]) . '">' ,
        '<a href="' . url('/admin/imageFactory/edit/') . $item[ 'fid' ] . '">edit</a>'
    );
  }

  return empty($rows) ? '' : theme('table' , array( 'header' => $header , 'rows' => $rows ));
}

function imageFactory_imageEdit( $id )
{
  if ( $id ) {
    $row = imageFactory_getFile($id);
    $imageSrc = file_create_url($row->uri);
    $imageInfo = getimagesize($imageSrc);
    $imageRoute = $row->uri;
    drupal_add_css(drupal_get_path('module' , 'imageFactory') . '/' . 'edit.css');
    drupal_add_css(drupal_get_path('module' , 'imageFactory') . '/colorpicker/css/' . 'colorpicker.css');
    drupal_add_js(drupal_get_path('module' , 'imageFactory') . '/colorpicker/js/' . 'colorpicker.js');
    drupal_add_js(drupal_get_path('module' , 'imageFactory') . '/colorpicker/js/' . 'eye.js');

    $fontFamily = imageFactory_getFonts();
    $fontSrc = array( );
    $fontsImagePath = file_create_url(imageFactory_getDir('fontsImage' , FALSE , FALSE));
    foreach ( $fontFamily as $value ) {
      $fontSrc[ ] = $fontsImagePath . '/' . $value . '.png';
    }

    return theme('imageFactory' , array(
                'image' => $imageSrc ,
                'imageRoute' => $imageRoute ,
                'fid' => $id ,
                'imageInfo' => $imageInfo ,
                'fontsInfo' => array( 'family' => $fontFamily , 'src' => $fontSrc )
            ));
  }
}

function imageFactory_ResizeAjax()
{
  //test 
  /*
    $_POST = array( 'height' => 75 , 'width' => 75 , 'top' => 0 , 'left' => 0 , 'fid' => 4577 ,
    'src' => 'http://xxx/imageFactory/create/2013/03/08/5261/qq.png' );
   */

  $_POST[ 'src' ] = imageFactory_webUrlToSer($_POST[ 'src' ]);
  try {
    $parms = array( 'width' , 'height' , 'top' , 'left' , 'src' , 'fid' );
    foreach ( $parms as $p ) {
      if ( !isset($_POST[ $p ]) ) {
        throw new Exception('parm error: ' . $p);
      }
    }

    $pathTo = imageFactory_getDir('tmp' , TRUE);

    require 'imageResize.php';
    $msg = '';
    $result = imageJeff::reseizeImage($_POST[ 'src' ] , $pathTo , $_POST[ 'width' ] , $_POST[ 'height' ] , $_POST[ 'top' ] , $_POST[ 'left' ] , $msg);
    if ( $result ) {
      echo json_encode(array( 'result' => 'success' , 'src' => imageFactory_pathSerToWeb($result) ));
    } else {
      throw new Exception('Resize fail:' . $msg);
    }
  } catch ( Exception $e ) {
    echo json_encode(array( 'result' => 'error' , 'error' => $e->getMessage() ));
  }
}

function imageFactory_getFile( $id )
{
  $query = db_select('file_managed' , 'FM');
  $query->condition('FM.fid' , $id);
  $query->fields('FM' , array( 'filename' , 'uri' , 'timestamp' ))
          ->orderBy('timestamp' , 'DESC');
  $result = $query->execute();
  $row = $result->fetch();

  return $row;
}

function imageFactory_theme()
{
  return array(
      'imageFactory' => array(
          'variables' => array(
              'image' => NULL , 'imageRoute' => NULL , 'fid' => NULL ,
              'imageInfo' => NULL , 'fontsFamily' => NULL
          ) ,
          'template' => 'imageFactoryResize' ,
          'path' => drupal_get_path('module' , 'imageFactory') ,
      ) ,
  );
}

function imageFactory_addText()
{
  $errorMsg = '';
  if ( isset($_POST[ 'B' ]) ) {
    $_POST[ 'B' ] = imageFactory_webUrlToSer($_POST[ 'B' ]);
    if ( file_exists($_POST[ 'B' ]) ) {
      $pathTo = imageFactory_getDir('tmp' , TRUE);
      $filename = $pathTo . DIRECTORY_SEPARATOR . time() . '.png';
      require 'drawMultiText.php';
      $fonts = imageFactory_getFonts();
      $fontsPath = $fontPath = imageFactory_getDir('fonts' , TRUE , FALSE);
      if ( drawTextOnPic($filename , $fonts , $fontsPath , $errorMsg) ) {
        echo json_encode(array( 'result' => 'success' , 'src' => imageFactory_pathSerToWeb($filename) ));
        die();
      } else {
        $errorMsg = 'Draw text fail: ' . $errorMsg;
      }
    } else {
      $errorMsg = 'Image doesn\'t exists';
    }
  } else {
    $errorMsg = 'Parm B is empty';
  }
  echo json_encode(array( 'result' => 'fail' , 'error' => $errorMsg ));
}

function imageFactory_save()
{
  global $user;
  $msg = '';

  if ( isset($_POST[ 'file' ]) && isset($_POST[ 'name' ]) && $_POST[ 'name' ] ) {
    $oldFile = imageFactory_webUrlToSer(urldecode($_POST[ 'file' ]));
    if ( file_exists($oldFile) ) {
      $path = imageFactory_getDir('create' , TRUE);
      $newFile = $path . DIRECTORY_SEPARATOR . $_POST[ 'name' ] . '.png';

      rename($oldFile , $newFile);

      $filemine = 'image/png';
      $filesize = filesize($newFile);

      $data = array(
          'uid' => $user->uid ,
          'filename' => $_POST[ 'name' ] . '.png' ,
          'uri' => imageFactory_pathSerToWeb($newFile) ,
          'filemime' => $filemine ,
          'filesize' => $filesize ,
          'status' => 1 ,
          'timestamp' => time() ,
      );

      if ( drupal_write_record('file_managed' , $data) ) {
        echo json_encode(array( 'result' => 'success' ));
        die();
      } else {
        $msg = 'save to database fail';
      }
    } else {
      $msg = 'file dosent\'t exist';
    }
  } else {
    $msg = 'Miss post parm !';
  }
  echo json_encode(array( 'result' => 'fail' , 'error' => $msg ));
}

function imageFactory_pathPublicToSer( $publicRouter )
{
  return str_replace('\\' , '/' , str_replace('public://' , DRUPAL_ROOT . '/' . variable_get('file_public_path' , '/sites/default/files') . '/' , $publicRouter));
}

function imageFactory_pathSerToWeb( $serverPath )
{
  $publicPath = str_replace(DRUPAL_ROOT . '/' . variable_get('file_public_path' , '/sites/default/files') . '/' , 'public://' , $serverPath);
  return file_create_url($publicPath);
}

function imageFactory_webUrlToSer( $url )
{
  return preg_replace('^|http(s)?\:\/\/[^\/]+|i' , DRUPAL_ROOT , $url);
}

function imageFactory_getDir( $dir = '' , $absolutePath = FALSE , $timeAndRandom = TRUE )
{
  $year = date('Y');
  $month = date('m');
  $day = date('d');
  $dir = ($dir) ? '/' . $dir : '';
  $destinationPath = ($absolutePath) ? DRUPAL_ROOT . '/' . variable_get('file_public_path' , '/sites/default/files') . '/' : 'public://';
  $destinationPath .= 'imageFactory' . $dir;
  if ( $timeAndRandom ) {
    $destinationPath.='/' . $year . '/' . $month . '/' . $day . '/' . rand(0 , 9999);
  }

  if ( !is_dir($destinationPath) ) {
    drupal_mkdir($destinationPath , 0777 , TRUE);
  }

  return $destinationPath;
}

function imageFactory_cron()
{
  $clearTimeLast = variable_get('imageFactory' , '/sites/default/files');
  if ( !$clearTimeLast ) {
    variable_set('imageFactory' , time());
  }
//    43200 = 60*60*12 
  if ( time() - $clearTimeLast < 43200 ) {
    watchdog(WATCHDOG_INFO , 'image factory cron job needn\'t clear tmp file');
    return FALSE;
  }
  //be careful to use this dangerous func
  if ( file_unmanaged_delete_recursive(imageFactory_getDir('tmp' , TRUE , FALSE)) ) {
    watchdog(WATCHDOG_INFO , 'image factory cron job success clear tmp file');
  } else {
    watchdog(WATCHDOG_CRITICAL , 'image factory cron job clear tmp file fail!!');
  }
}


<?php

/**
 *  author  :   jeffstric
 *  email   :   jeffstricg@gmail.com
 *  date    :   2012-12-12
 *  time    :   20:01:31
 * */
define('IMAGEFACTORYKEY' , 'picture');

/**
 * Implementation of hook_permission() 
 */
function imageFactory_permission()
{
    return array(
	'imageFactory image upload' => array(
	    'title' => t('image imageFactory upload and list') ,
	    'description' => t('Allow users upload image to imageFactory') ,
	) ,
    );
}

function imageFactory_menu()
{
    $items[ 'admin/imageFactory/upload' ] = array(
	'title' => 'upload image' ,
	'page callback' => 'drupal_get_form' ,
	'page arguments' => array( 'imageFactory_fileUploadForm' ) ,
	'access callback' => 'user_access' ,
	'access arguments' => array( 'imageFactory image upload' ) ,
	'type' => MENU_SUGGESTED_ITEM ,
	'weight' => 1
    );
    $items[ 'admin/imageFactory/list' ] = array(
	'title' => 'upload image' ,
	'page callback' => 'imageFactory_imageList' ,
	'access callback' => 'user_access' ,
	'access arguments' => array( 'image imageFactory upload and list' ) ,
	'type' => MENU_SUGGESTED_ITEM ,
	'weight' => 1
    );
    $items[ 'admin/imageFactory/edit/%' ] = array(
	'title' => 'upload image' ,
	'page callback' => 'imageFactory_imageEdit' ,
	'page arguments' => array( 3 ) ,
	'access callback' => 'user_access' ,
	'access arguments' => array( 'image imageFactory upload and list' ) ,
	'type' => MENU_SUGGESTED_ITEM ,
	'weight' => 1
    );
    $items[ 'admin/imageFactory/resizeAjax' ] = array(
	'title' => 'upload image test' ,
	'page callback' => 'imageFactoryResizeAjax' ,
	'access callback' => TRUE ,
	'type' => MENU_CALLBACK ,
	'weight' => 1
    );
    $items[ 'admin/imageFactory/addText' ] = array(
	'title' => 'upload image' ,
	'page callback' => 'imageFactoryAddText' ,
	'access callback' => TRUE ,
	'type' => MENU_CALLBACK ,
	'weight' => 1
    );
    $items[ 'admin/imageFactory/save' ] = array(
	'title' => 'save image' ,
	'page callback' => 'imageFactorySave' ,
	'access callback' => 'user_access' ,
	'access arguments' => array( 'image imageFactory upload and list' ) ,
	'type' => MENU_CALLBACK ,
	'weight' => 1
    );
    return $items;
}

/**
 * Define a form. 
 */
function imageFactory_fileUploadForm()
{
    $form[ '#method' ] = 'post';
    $form[ '#attributes' ][ 'enctype' ] = 'multipart/form-data';
    $form[ IMAGEFACTORYKEY ] = array(
	'#type' => 'file' ,
	'#title' => t('Upload picture') ,
	'#size' => 48 ,
	'#description' => t('The picture you want upload.') ,
    );
    $form[ 'submit' ] = array(
	'#type' => 'submit' ,
	'#value' => t('Submit')
    );
    return $form;
}

function imageFactory_imageList()
{
    $count = db_query("SELECT COUNT(*) FROM {file_managed}")->fetchField();
    $pageNum = pager_default_initialize($count , 10);
    $pagerHtml = theme('pager' , array( 'quantity' => $count ));
    $result = db_select('file_managed' , 'fm')->fields('fm')->orderBy('timestamp' , 'desc')
		    ->range($pageNum * 10 , 10)->execute()->fetchAll(PDO::FETCH_ASSOC);
    $fileHtml = theme_imageFactory_file_formatter_table(array( 'items' => $result ));
    return $pagerHtml . $fileHtml . $pagerHtml;
}

function theme_imageFactory_file_formatter_table( $variables )
{
    global $base_url;
    $header = array( t('Attachment') , t('time') , t('Size') , t('thumb') , t('operate') );
    $rows = array( );
    foreach ( $variables[ 'items' ] as $delta => $item ) {
	$rows[ ] = array(
	    theme('file_link' , array( 'file' => (object) $item )) ,
	    date('Y-m-d H:i:s' , $item[ 'timestamp' ]) . '&nbsp;&nbsp;' ,
	    format_size($item[ 'filesize' ]) ,
	    '<img  height="100" width="100" src="' . file_create_url($item[ 'uri' ]) . '">' ,
	    '<a href="' . $base_url . '/admin/imageFactory/edit/' . $item[ 'fid' ] . '">edit</a>'
	);
    }

    return empty($rows) ? '' : theme('table' , array( 'header' => $header , 'rows' => $rows ));
}

function imageFactory_imageEdit( $id )
{
    if ( $id ) {
	$row = imageFactory_getFile($id);
	$imageSrc = file_create_url($row->uri);
	$imageInfo = getimagesize($imageSrc);
	$imageRoute = $row->uri;
	drupal_add_css(drupal_get_path('module' , 'imageFactory') . '/' . 'edit.css');
	drupal_add_css(drupal_get_path('module' , 'imageFactory') . '/colorpicker/css/' . 'colorpicker.css');
	drupal_add_js(drupal_get_path('module' , 'imageFactory') . '/colorpicker/js/' . 'colorpicker.js');
	drupal_add_js(drupal_get_path('module' , 'imageFactory') . '/colorpicker/js/' . 'eye.js');

	return theme('imageFactory' , array( 'image' => $imageSrc , 'imageRoute' => $imageRoute , 'fid' => $id , 'imageInfo' => $imageInfo ));
    }
}

function imageFactoryResizeAjax()
{
    $_POST[ 'src' ] = imageFactory_pathPublicToSer($_POST[ 'src' ]);
    //test 
    /*
      $_POST = array('height' => 75 ,'width' => 75 ,'top' => 0 ,'left' => 0 ,'fid' => 4569 ,'src' => '');
     */
    try {
	$parms = array( 'width' , 'height' , 'top' , 'left' , 'src' , 'fid' );
	foreach ( $parms as $p ) {
	    if ( !isset($_POST[ $p ]) ) {
		throw new Exception('parm error: ' . $p);
	    }
	}

	$pathTo = imageFactory_getDir('tmp' , TRUE);

	require 'imageResize.php';
	$result = imageJeff::reseizeImage($_POST[ 'src' ] , $pathTo , $_POST[ 'width' ] , $_POST[ 'height' ] , $_POST[ 'top' ] , $_POST[ 'left' ]);
	if ( $result ) {
	    echo json_encode(array( 'info' => 'success' , 'src' => imageFactory_pathSerToWeb($result) ));
	} else {
	    throw new Exception('resize fail');
	}
    } catch ( Exception $e ) {
	echo json_encode(array( 'info' => 'error' , 'error' => $e->getMessage() ));
    }
}

function imageFactory_getFile( $id )
{
    $query = db_select('file_managed' , 'FM');
    $query->condition('FM.fid' , $id);
    $query->fields('FM' , array( 'filename' , 'uri' , 'timestamp' ))
	    ->orderBy('timestamp' , 'DESC');
    $result = $query->execute();
    $row = $result->fetch();

    return $row;
}

function imageFactory_fileUploadForm_submit( $form , &$form_state )
{
    $validators = array(
	'file_validate_extensions' => array( 'jpg png gif' ) ,
    );
    $destinationPath = imageFactory_getDir();

    $file = file_save_upload(IMAGEFACTORYKEY , $validators , $destinationPath);
    if ( $file ) {
	$file->status = 1;
	file_save($file);
	drupal_set_message(t('load file success!'));

	$record = new stdClass();
	$record->fid = $file->fid;
    }
}

function imageFactory_theme()
{
    return array(
	'imageFactory' => array(
	    'variables' => array( 'image' => NULL , 'imageRoute' => NULL , 'fid' => NULL , 'imageInfo' => NULL ) ,
	    'template' => 'imageFactoryResize' ,
	    'path' => drupal_get_path('module' , 'imageFactory') ,
	) ,
    );
}

function imageFactory_getDir( $dir = '' , $absolutePath = FALSE )
{
    $year = date('Y');
    $month = date('m');
    $day = date('d');
    $dir = ($dir) ? '/' . $dir : '';
    $destinationPath = ($absolutePath) ? DRUPAL_ROOT . '/' . variable_get('file_public_path') . '/' : 'public://';
    $destinationPath .= 'imageFactory' . $dir . '/' . $year . '/' . $month . '/' . $day . '/' . rand(0 , 9999);

    if ( !is_dir($destinationPath) ) {
	drupal_mkdir($destinationPath , 0777 , TRUE);
    }

    return $destinationPath;
}

function imageFactoryAddText()
{
    $errorMsg = '';
    if ( isset($_POST[ 'B' ]) ) {
	$_POST[ 'B' ] = imageFactory_webUrlToSer($_POST[ 'B' ]);
	if ( file_exists($_POST[ 'B' ]) ) {
	    $pathTo = imageFactory_getDir('tmp' , TRUE);
	    $filename = $pathTo . DIRECTORY_SEPARATOR . time() . '.png';
	    require 'drawMultiText.php';
	    if ( drawTextOnPic($filename) ) {
		echo json_encode(array( 'result' => 'success' , 'src' => imageFactory_pathSerToWeb($filename) ));
		die();
	    } else {
		$errorMsg = 'Draw text fail';
	    }
	} else {
	    $errorMsg = 'Image doesn\'t exists';
	}
    } else {
	$errorMsg = 'Parm B is empty';
    }
    echo json_encode(array( 'result' => 'fail' , 'error' => $errorMsg ));
}

function imageFactorySave()
{
    global $user;
    $msg = '';

    if ( isset($_POST[ 'file' ]) ) {
	$oldFile = imageFactory_webUrlToSer(urldecode($_POST[ 'file' ]));
	if ( file_exists($oldFile) ) {
	    $path = imageFactory_getDir('create' , TRUE);
	    $time = time();
	    $newFile = $path . DIRECTORY_SEPARATOR . $time . '.png';

	    rename($oldFile , $newFile);

	    $filemine = 'image/png';
	    $filesize = filesize($newFile);

	    $data = array(
		'uid' => $user->uid ,
		'filename' => $time . '.png' ,
		'uri' => imageFactory_pathSerToWeb($newFile) ,
		'filemime' => $filemine ,
		'filesize' => $filesize ,
		'status' => 1 ,
		'timestamp' => $time ,
	    );

	    if ( drupal_write_record('file_managed' , $data) ) {
		echo json_encode(array( 'result' => 'success' ));
		die();
	    } else {
		$msg = 'save to database fail';
	    }
	} else {
	    $msg = 'file dosent\'t exist';
	}
    } else {
	$msg = 'no post parm';
    }
    echo json_encode(array( 'result' => 'fail' , 'error' => $msg ));
}

function imageFactory_pathPublicToSer( $publicRouter )
{
    return str_replace('\\' , '/' , str_replace('public://' , DRUPAL_ROOT . '/' . variable_get('file_public_path') . '/' , $publicRouter));
}

function imageFactory_pathSerToWeb( $serverPath )
{
    $publicPath = str_replace(DRUPAL_ROOT . '/' . variable_get('file_public_path') . '/' , 'public://' , $serverPath);
    return file_create_url($publicPath);
}

function imageFactory_webUrlToSer( $url )
{
    return preg_replace('|http(s)?\:\/\/[^\/]+|' , DRUPAL_ROOT , $url);
}


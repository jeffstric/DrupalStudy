<?php

/**
 *  author  :   jeffstric
 *  email   :   jeffstricg@gmail.com
 *  date    :   Nov 14, 2012
 *  time    :   1:38:38 PM
 * */
/**
 * @file
 * * Enables a single-user blog.
 */
define('EXPERTPICKS_NODE_TYPE' , 'expect_picks');
define('EXPERTPICKS_LIST_COUNT' , 5);

/**
 * Returns a list of blog entries.
 *
 * @param $number
 *   The number of blog entries to return.
 * @return
 *   A result set object containing the list of blog entries.
 */
function expertPicks_list( $number )
{
    $query = db_select('node' , 'n');

    $query->join('field_data_field_expect_pick_image' , 'i' , 'n.nid = i.entity_id');
    $query->join('file_managed' , 'm' , 'i.field_expect_pick_image_fid = m.fid');
    $query->join('field_data_field_url' , 'u' , 'n.nid = u.entity_id');

    $query->addField('i' , 'field_expect_pick_image_alt' , 'alt');
    $query->addField('u' , 'field_url_value' , 'url');
    $query->addField('m' , 'uri' , 'src');
    $query->addField('n' , 'title' , 'name');

//    $query->groupBy('n.created');

    $query->fields('i' , array( 'field_expect_pick_image_fid' ))
	    ->orderBy('created' , 'DESC')
	    ->range(0 , 5);

    return $query->execute();
}

/**
 * Implements hook_block_info().
 */
function expertPicks_block_info()
{
    $blocks = array( );
// The array key defines the $delta parameter used in all
// other block hooks.
    $blocks[ 'expertPicks' ] = array(
// The name of the block on the blocks administration page.
	'info' => 'expertPicks' ,
	'cache' => DRUPAL_CACHE_PER_ROLE ,
//	'cache' => DRUPAL_NO_CACHE,//develop environment
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 *
 *  * First draft!
 *
 * @pararm $delta
 *   The name of the requested block.
 */
function expertPicks_block_view( $delta = '' )
{
// Create an empty block.
    $block = array(
	'subject' => 'expert picks' ,
	'content' => 'expertPicks content' ,
    );
    $items = array(
	'title' => '' ,
	'type' => 'ul' ,
	'items' => expertPicks_list(EXPERTPICKS_LIST_COUNT) ,
    );
    if ( !empty($items['items']) ) {
	$block[ 'content' ] = theme('expertPicksOutput' , $items);
    }
    return $block;
}

function expertPicks_theme()
{
    return array(
	'expertPicksOutput' => array(
	    'variables' => array( 'items' => array( ) ) ,
	) ,
    );
}

function theme_expertPicksOutput( $variables )
{
    $items = $variables[ 'items' ];
    $title = $variables[ 'title' ];
    $type = $variables[ 'type' ];

    // Only output the list container and title, if there are any list items.
    // Check to see whether the block title exists before adding a header.
    // Empty headers are not semantic and present accessibility challenges.
    $output = '<div class="item-list">';
    //title alawys empty , because block already has title
    if ( isset($title) && $title !== '' ) {
	$output .= '<h3>' . $title . '</h3>';
    }
    // output items
    if ( !empty($items) ) {
	$output .= "<$type>";
	foreach ( $items as $item ) {
	    $item->alt = $item->alt ? $item->alt : $item->name;
	    $item->src = file_create_url($item->src);
	    $output .=
	'<li>
		<a href="' . $item->url . '" target="_self">
		    <img src="' . $item->src . '" alt="' . $item->alt . '">
		</a>
		<a href="' . $item->url . '" target="_self">' . $item->name . '</a>
	    </li>';
	}
	$output .= "</$type>";
    }
    $output .= '</div>';
    return $output;
}
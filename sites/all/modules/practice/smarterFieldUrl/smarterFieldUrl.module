<?php

/**
 *  author  :   jeffstric
 *  email   :   jeffstricg@gmail.com
 *  date    :   Nov 14, 2012
 *  time    :   1:38:38 PM
 * */
/**
 * @file
 * * transfer outgoing url to track url
 */
//This is used to get default value, you can omit it before you instancing a field
define('SMARTER_URL_TABLENAME' , 'field_data_field_smarter_url');

//This is db table cloumn last name
define('SMARTER_URL_CLOUMN_NAME' , 'url');

/**
 * Implements hook_field_info(). 
 * 
 * Provides the description of the field. 
 */
function smarterFieldUrl_field_info()
{
    return array(
	'smarterFieldUrlField' => array(
	    'label' => t('smarter track url') ,
	    'description' => t('add  track url field ') ,
	    'default_widget' => 'smarterFieldUrlWidget' ,
	    'default_formatter' => 'smarterFieldUrlFormatter' ,
	) ,
    );
}

function smarterFieldUrl_field_is_empty( $item , $field )
{
    return empty($item[ SMARTER_URL_CLOUMN_NAME ]);
}

/**
 * Implements hook_field_widget_info(). 
 */
function smarterFieldUrl_field_widget_info()
{
    return array(
	'smarterFieldUrlWidget' => array(
	    'label' => t('smarter url input') ,
	    'field types' => array( 'smarterFieldUrlField' ) ,
	) ,
    );
}

/**
 * Implements hook_field_widget_form(). 
 */
function smarterFieldUrl_field_widget_form( &$form , &$form_state , $field , $instance , $langcode , $items , $delta , $element )
{
    $node = isset($form_state[ 'node' ]) ? $form_state[ 'node' ] : FALSE;
    $nid = (isset($node) && isset($node->nid) ) ? $node->nid : FALSE;

    switch ( $instance[ 'widget' ][ 'type' ] ) {
	case 'smarterFieldUrlWidget':
	    $element[ SMARTER_URL_CLOUMN_NAME ] = array(
		'#title' => t('url') ,
		'#type' => 'textfield' ,
		'#description' => t('Enter the url of item') ,
		'#default_value' => smarterFieldUrl_getDefaultValue($nid) ,
		'#maxlength' => 500 ,
		'#size' => 110 ,
	    );
    }

    return $element;
}

function smarterFieldUrl_getDefaultValue( $nid )
{
    if ( $nid ) {
	$query = db_select('field_data_field_smarter_url' , 'U');
	$query->addField('U' , 'field_smarter_url_url' , 'url');
	$query->fields('U' , array( 'entity_id' ));
	$result = $query->condition('entity_id' , $nid)->execute()->fetchAssoc();

	return $result['url'];
    } else {
	return '';
    }
}

/**
 * Implements hook_field_validate().
 *
 *
 */
function smarterFieldUrl_field_validate( $entity_type , $entity , $field , $instance , $langcode , $items , &$errors )
{
    foreach ( $items as $delta => $item ) {
	if ( !empty($item[ SMARTER_URL_CLOUMN_NAME ]) ) {
	    if ( !is_string($item[ SMARTER_URL_CLOUMN_NAME ]) ) {
		$errors[ $field[ 'field_name' ] ][ $langcode ][ $delta ][ ] = array(
		    'error' => 'invalid_type_smarter_url' ,
		    'message' => t('URL MUST BE STRING') ,
		);
	    }
	}
    }
}

/**
 * Implements hook_field_widget_error().
 */
function smarterFieldUrl_field_widget_error( $element , $error , $form , &$form_state )
{
    switch ( $error[ 'error' ] ) {
	case 'invalid_type_smarter_url':
	    form_error($element , $error[ 'message' ]);
	    break;
    }
}

/**
 * Implements hook_field_formatter_info(). 
 */
function smarterFieldUrl_field_formatter_info()
{
    return array(
	// This formatter just displays the hex value in the color indicated. 
	'smarterFieldUrlFormatter' => array(
	    'label' => t('select items in this shopping guide') ,
	    'field types' => array( 'smarterFieldUrlField' ) ,
	) ,
    );
}

/**
 * Implements hook_field_formatter_view(). 
 */
function smarterFieldUrl_field_formatter_view( $entity_type , $entity , $field , $instance , $langcode , $items , $display )
{
    return array( );
}

/**
 * Define custom presave behavior for this module's field types.
 *
 * Make changes or additions to field values by altering the $items parameter by
 * reference. There is no return value.
 *
 */
function smarterFieldUrl_field_presave( $entity_type , $entity , $field , $instance , $langcode , &$items )
{
    global $base_url;

    if ( $field[ 'type' ] == 'smarterFieldUrlField' ) {

	require_once drupal_get_path('module' , 'smarterFieldUrl') . '/UrlBuilder.php';

	foreach ( $items as $key => $value ) {
	    //transfer url
	    if ( web_judgeOutLink($value[ SMARTER_URL_CLOUMN_NAME ]) )
		$items[ $key ][ SMARTER_URL_CLOUMN_NAME ] = 
		$base_url . '/' .
		Tracking_UrlBuilder::build(array(
			Tracking_UrlBuilder::URL_PARAM_BUILD_TYPE => 'general' , // redrect typeï¼Œvalue is  general 
			Tracking_UrlBuilder::URL_PARAM_DESTINED_URL => trim($value[ SMARTER_URL_CLOUMN_NAME ]) // URL
		    ));
	}
    }
    
}